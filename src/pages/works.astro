---
import PageLayout from "@/layouts/page-layout.astro";
import TableHead from "@/components/table-head.astro";
const title = "Works";
---

<PageLayout title={title}>
  <TableHead title={title} />

  <script>
    import { setupTableActions } from "@/lib/table-actions";
    import { TabulatorFull as Tabulator } from "tabulator-tables";
    import "tabulator-tables/dist/css/tabulator_semanticui.min.css";
    import data from "../content/data/works.json";
    import { jsonpathLookup } from "@/lib/tabulator-utils.js";

    var tabledata = [...Object.values(data)];

    var table = new Tabulator("#tabulator-table", {
      headerFilterLiveFilterDelay: 600,
      height: 900,
      data: tabledata,
      layout: "fitColumns",
      responsiveLayout: "collapse",
      rowHeader: {
        formatter: "responsiveCollapse",
        width: 30,
        minWidth: 30,
        hozAlign: "center",
        resizable: false,
        headerSort: false,
      },
      columns: [
        {
          title: "Title",
          resizable: true,
          field: "title",
          minWidth: 200,
          headerFilter: "input",
        },
        {
          title: "Author",
          resizable: true,
          field: "author",
          minWidth: 200,
          headerFilter: "input",
          // Custom filter: checks all names AND alt_names in the array
          headerFilterFunc: function (headerValue, rowValue, rowData) {
            if (!headerValue) return true;
            const search = headerValue.toLowerCase();
            // rowValue is the array of author objects
            return (
              Array.isArray(rowValue) &&
              rowValue.some((author) => {
                const nameMatch = author.name?.toLowerCase().includes(search);
                const altNameMatch = author.alt_name
                  ? // some alt_name are empty strings need to check for that
                    author.alt_name.toLowerCase().includes(search)
                  : false;
                return nameMatch || altNameMatch;
              })
            );
          },
          // Formatter: show only the author names
          formatter: function (cell) {
            return cell
              .getValue()
              .map((author: { name: string; alt_name?: string }) => author.name)
              .join(", ");
          },
        },
        {
          title: "Genre",
          resizable: true,
          field: "genre",
          minWidth: 200,
          headerFilter: "input",
          formatter: "textarea",
        },

        {
          title: "Manuscripts",
          resizable: true,
          field: "manuscripts",
          minWidth: 200,
          mutator: jsonpathLookup,
          mutatorParams: {
            path: "$[*].name",
            separator: "; ",
          },
          headerFilter: "input",
        },
        {
          title: "Passages",
          resizable: true,
          field: "related__passages",
          mutator: jsonpathLookup,
          mutatorParams: {
            path: "$[*].position_in_work",
            separator: "; ",
          },
          minWidth: 200,
          headerFilter: "input",
        },
        {
          title: "Context",
          resizable: true,
          field: "institutional_context",
          minWidth: 200,
          mutator: jsonpathLookup,
          mutatorParams: {
            path: "$[*].name",
            separator: "; ",
          },
          headerFilter: "input",
        },
        {
          title: "Date",
          resizable: true,
          field: "date",
          mutator: jsonpathLookup,
          mutatorParams: {
            path: "$[*].value",
            separator: "; ",
          },
          minWidth: 200,
          headerFilter: "input",
        },
      ],
    });
    setupTableActions(table, "works");
  </script>
</PageLayout>
