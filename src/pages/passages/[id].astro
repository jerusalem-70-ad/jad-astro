---
import PageLayout from "../../layouts/page-layout.astro";
import passages from "../../content/data/passages.json";
import { Icon } from "astro-icon/components";


export async function getStaticPaths() {
    const paths = Object.values(passages).map((passage) => ({
         params: {id: passage.jad_id.toString()},
          props: {data: passage}
   }));
   return paths;
}

const { data: passage } = Astro.props;

---
<PageLayout>
   <div class="md:grid md:grid-cols-[1fr_4fr] md:gap-2">
    <aside class="hidden md:block border-2 border-r-brandBrown bg-brandRose p-6 overflow-scroll max-h-svh">
        <ul>
              
            {Object.values(passages).map((passage) => {
                return (
                    <li id={`passage-${passage.jad_id}`} class="list-disc overflow-hidden whitespace-nowrap text-ellipsis max-w-md hover:text-wrap">                     
                       <a href={passage.jad_id} class="hover:text-brandRed">({passage.jad_id.substring(15)}) <span class="italic">{passage.passage}</span></a>                                                        
                    </li>)
            })}
        </ul>      
    </aside>
    <div>
        <div class="border-2 rounded-sm border-brandBrown bg-brandRose mt-5 mx-5 grid p-5">
            <h1 class="text-xl py-3 mx-auto font-medium">({passage.id}) <span class="italic">{passage.passage}</span></h1>
            
            <dl class="grid grid-cols-[1fr_5fr] text-sm md:text-base md:leading-7"> 
              
              <dt class="font-semibold border-r border-gray-300 pr-2">Author:</dt>
              <dd class="pl-5">{passage.Author[0]?.value ?? 'N/A'}</dd>        
              
              <dt class="font-semibold border-r border-gray-300 pr-2">Work:</dt>
              <dd class="pl-5">
                { passage.work.length > 0
                       ? passage.work.map((werk: { jad_id: string; title: any;}, index: number) => (
                         <>
                            <a href={`/works/${werk.jad_id}`} class="hover:text-brandRed">
                              {werk.title}
                            </a>
                            {/* to get comma after each entry BUT the last one (Index increments with each iteration, at the end it is equals to the length of the array -1) */}
                            {index < passage.work.length - 1 && ', '}
                          </>
                        )) : 'N/A'
                      }
                </dd>        
              
              <dt class="font-semibold border-r border-gray-300 pr-2">Position in work</dt>
              
              <dd class="pl-5">
                  { passage.position_in_work 
                    ? (passage.position_in_work.length > 0 
                        ? passage.position_in_work 
                        : 'N/A')
                    : 'N/A'}
                </dd>
              
              <dt class="font-semibold border-r border-gray-300 pr-2">Manuscripts:</dt>
              <!-- this is an array - need to call .map to return an array of strings with the jad_id; outside the .map call .join() But first checek if it is empty-->
              
              <dd class="pl-5">
                { passage.manuscript.length > 0
                       ? passage.manuscript.map((ms: { jad_id: string; name: any;}, index: number) => (
                         <>
                            <a href={`/manuscripts/${ms.jad_id}`} class="hover:text-brandRed">
                              {ms.name[0].value}
                            </a>
                            {/* to get comma after each entry BUT the last one (Index increments with each iteration, at the end it is equals to the length of the array -1) */}
                            {index < passage.manuscript.length - 1 && ', '}
                          </>
                        )) : 'N/A'
                      }
                </dd>
                
                
                <dt class="font-semibold border-r border-gray-300 pr-2">Biblical references:</dt>
                <dd class="pl-5">
                  {passage.biblical_references.length > 0
                    ? passage.biblical_references.map((reference: { value : any; }) => reference.value).join(', ')
                    : 'N/A'}
                </dd>
                
                <dt class="font-semibold border-r border-gray-300 pr-2">Liturgical references:</dt>
                <dd class="pl-5">
                  {passage.liturgical_references.length > 0
                      ? passage.liturgical_references.map((reference: { value: any }) => reference.value).join(', ')
                      : 'N/A'}
                </dd>
                
                <dt class="font-semibold border-r border-gray-300 pr-2">Full text:</dt>
                <dd class="pl-5">
                  { passage.text_paragraph
                  ? (passage.text_paragraph.length > 0
                    ? passage.text_paragraph 
                    : 'N/A')
                  : 'N/A'}</dd>
                
                <dt class="font-semibold border-r border-gray-300 pr-2">Passage found in:</dt>
                <dd class="pl-5">
                    {passage.occurrence_found_in.length > 0
                    ? passage.occurrence_found_in.map((find : { value : any; }) => {
                        return find.value
                    }).join(', ') : 'N/A'}
                </dd>
            </dl>
        
        </div>
        <div class="my-10 flex p-5 w-3/4 mx-auto justify-between">
          {passage.id > 1
          ? 
          <a href=`/passages/jad_occurence__${parseInt(passage.jad_id.split('__')[1]) -1}`>
            <Icon name="lucide:circle-arrow-left" class="size-20"></Icon>
            </a>
          : ''
      }
          
          <a href=`/passages/jad_occurence__${parseInt(passage.jad_id.split('__')[1]) +1}`>
            <Icon name="lucide:circle-arrow-right" class="size-20"></Icon>
          </a>
         
            
      </div>
        
    </div>

   </div>
</PageLayout>

  